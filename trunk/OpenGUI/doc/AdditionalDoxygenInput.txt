/*!
	\mainpage OpenGUI Documentation
	
	\image html logo.jpg
	
	%OpenGUI is an easy to use and easy to extend widget set for use in 3D applications.
	The core aim of %OpenGUI is to provide developers of 3D applications a drop in
	system for creating simple GUIs without hassle, while still providing an easy method
	of extendability for creating complex GUIs with custom widgets.
	<BR><BR>
	See the list of \subpage Features "features" for details.
	<BR><BR>
	
	
	
	\section UserDocs User Documentation
	The user documentation is divided into several sections and is intended to provide
	explanations and examples of library usage, as well provide a few advanced topics
	such as how to extend the GUI through custom widgets.
	
	- \subpage IntegratingOpenGUI "Integrating OpenGUI"
	
	- \subpage MessageSystem  "The Message System"
	
	- \subpage BaseWidgets "Base Widget Documentation"
	
	- \subpage CustomWidgets "Extending via Custom Widgets"
	
	\n\n\n
	<hr>	
	\note
	%OpenGUI is distributed using the  BSD license so that both amatuer and
	professional developers can benefit from its use. The exact copy of
	this license can be found in the file LICENSE.TXT that is distributed with the
	source code, or by clicking \link License here.\endlink
*/
/*!
	\page License
	%OpenGUI is freely usable/distributable under the BSD license, the contents of which follow:
	<HR>
	\verbinclude LICENSE.TXT
	<BR><HR><BR>
	%OpenGUI also utilizes a few external libraries. The names, websites and license types of these
	external libraries are listed below.
	<HR>
	Name: Corona (version 1.0.2)\n
	Website: http://corona.sourceforge.net/ \n
	License: <a href="http://opensource.org/licenses/zlib-license.html">zlib license</a> \n
	<HR>
	Name: TinyXML (version 2.4.3)\n
	Website: http://www.grinninglizard.com/tinyxml/index.html \n
	License: <a href="http://opensource.org/licenses/zlib-license.html">zlib license</a> \n
	<HR>
	Name: Freetype (version 2.1.10)\n
	Website: http://www.freetype.org/ \n
	License: <a href="http://freetype.sourceforge.net/FTL.TXT">The FreeType License</a> \n
	Credit as requested:\n
\verbatim
Portions of this software are copyright © 2006
The FreeType Project (www.freetype.org). All rights reserved.
\endverbatim
	
*/
/*!
	\page Features
	\verbatim
	This list is currently an expected feature list. Since development
	is in very early stages most these are not implemented. The list 
	also isn't entirely done.
	
	\endverbatim
	
	- Easily integrated with any input system: All input is injected into the system by the application
		using simple function calls.
	- Input injection logging with log playback feature.
	- Cross API: Is easily used in native DirectX or OpenGL, as well as the OGRE rendering engine.
	- Avoids custom containers when possible, using STL where available.
	- Easily extendable widget set by class inheritance.
	- Powerful message system with fully catchable and interruptable parent/child event propagation.
	- Supports loading of fonts via FreeType 2.
	- Supports native loading of mutiple imagery formats via Corona (http://corona.sourceforge.net)
	- Full alpha support for image types that support alpha channels. (Single channel imagery is interpretted as alpha only.)
	- Free form render operations allow Widget imagery to be rotated and scaled in any way imaginable.
	
	
	
*/

/*!
	\page MessageSystem The Message System

	Messages are used with %OpenGUI for nearly all communication. The base functionality
	necessary to support the message system is implemented as private functions within
	the Element class (which is a base class for the Widget class). So all custom
	widgets will implicitly have the necessary message passing functionality built in,
	and will not need to implement any additional functionality to support the message
	system. As messages are passed from widget to widget, each widget is given a chance
	to look at the message, and determine if it can handle it best. During this message
	peeking opportunity, a widget can decide if the message no longer needs to continue
	its widget-hopping journey, and propagation will be stopped.

	\section MessageTypes Message Types

	Messages come in 2 types, Events and Alerts. This section will cover the differences
	between them.

	\subsection MessageTypesEvents Events

	Events are generated by the system, and are sent down the Widget hierarchy, starting
	at the GUISheet, working directly toward a destination widget. This is referenced as
	a directed event. Alternatively, events can also be sent as global events. A global
	event starts at the GUISheet just as a directed event, but instead of following a
	direct line toward its destination it branches at every fork in the hierarchy. The
	following image should help clear up any uncertainties about the 2 different event
	propagation types.

	\image html EventPropagation.jpg "Event Propagation Example"

	The primary use of events is to notify Widgets of important information. Things like
	mouse movement and button clicks, keystrokes, and gui sheet activation are all types
	of information that are sent from the system to a widget using events.

	\see \subpage EventTypes "The complete list of Event Types"

	\subsection MessageTypesAlerts Alerts

	Alerts are much like events, with very simple differences. First, they always
	originate from a Widget, and propagate back up the hierarchy toward the GUISheet.
	Second, since they never have any opportunities to fork (as they travel in the wrong
	direction of the tree), they do not have a global propagation method.

	\image html AlertPropagation.jpg "Alert Propagation Example"

	The primary use of alerts is to provide widgets a method of providing feedback to
	the application based on received events. If a button widget is "pressed", then that
	widget should send an alert back up the hierarchy to inform anyone who is listening.
	Since alerts are so tightly bound to the widget that is issuing them, they can only
	be evaluated by referencing the documentation of the specific widget.
	
	\see \ref BaseWidgets "The complete list of base widgets"
*/



/*!
	\page CustomWidgets
	This page explains how to create custom widgets to extend the gui.
	
	\section RecievingEvents Recieving Events
	\section IssuingAlerts Issuing Alerts
*/

/*!
	\page BaseWidgets Base Widgets
	This is the complete list of all base widgets.
	<HR>
	
*/

/*! \page GeneralTODOs General TODOs
	\todo - Need to ensure that every function and variable that is intended for use by 
		end users is documented with a doxygen tag, otherwise they will not show up in
		the final end user build of the documentation.
	
	\todo - Add cursors 	
	\todo - After cursors are in, implement more of the events
	\todo - implement Tooltips
	\todo - add more of the base widgets
	\todo - implement xml imagery loading
	\todo - design string based widget Property system
	\todo - implement widgetfactory (so widgets can be created by name)
	\todo - implement guisheet saving and restoring via xml
	\todo - implement ThemeFactory (for creating widgets of any registerd type and autoassigning properties based on "theme")
	
*/

/*! \page DefaultImageset
	There is a default image that is used whenever an Imageset is unloaded when there are
	still Imagery objects that refer to it used within Widgets. This image is built directly
	into the library source, and is always immediately loaded as a texture when the System
	object is created.
	
	Just so you know what to look for, here it is:
	 
	 
	\image html UnknownImage.bmp
*/

/*! \page IntegratingOpenGUI
	This will cover how to add OpenGUI to your application
*/