/*!
<!-- This document is best edited with LINE WRAPPING ENABLED! -->
\page StringFormats String Formatting of Types

Within %OpenGUI there are several object types that can be converted to and from strings. The purpose of this document is to provide documentation for the string representation of these objects. 

Throughout %OpenGUI, all string readable and writable objects are converted through the \ref OpenGUI::StrConv "StrConv" class. The following is a guide to the input that StrConv expects, as well as what you can expect the output of StrConv to look like.

\note
Whitespace is present in many of the string formats. This whitespace is optional. The presence or lack of whitespace should not affect processing. All other non-base type decorations such as <pre>{ } ( ) x X # @ | :</pre> are used for structure verification and delimiting, and are required.


<hr>
\section FormatInt int
	- Conversion functions: OpenGUI::StrConv::toInt(), OpenGUI::StrConv::fromInt()
	- Example: 42


<hr>
	\section FormatFloat float
	- Conversion functions: OpenGUI::StrConv::toFloat(), OpenGUI::StrConv::fromFloat()
	- Example: 1.54329034


<hr>
\section FormatBool bool
	- Conversion functions: OpenGUI::StrConv::toBool(), OpenGUI::StrConv::fromBool()
	- Example: true

	Valid values for reading bool are "true", "false", "1", and "0". When writing, the "true" and "false" values are always used. Case is ignored.


<hr>
\section FormatIVector2 IVector2
	- Conversion functions: OpenGUI::StrConv::toIVector2(), OpenGUI::StrConv::fromIVector2()
	- Example: ( 42 x 71 )

	General format:<br>
	\b ( \e int_x \b x \e int_y \b )

	The parenthesis are required, and the "x" is used as a delimiter between the 2 integers. The case of the \c x is significant.


<hr>
\section FormatIRect IRect
	- Conversion functions: OpenGUI::StrConv::toIRect(), OpenGUI::StrConv::fromIRect()
	- Example: { ( 10 x 34 ) X ( 42 x 71 ) }

	General format:<BR>
	\b { \b ( \e int_min_x \b x \e int_min_y \b ) \b X \b ( \e int_max_x \b x \e int_max_y \b ) \b }

	The {, }, (, ), x, and X are required. The case of \c X and \c x is significant. This is best thought of as two IVector2's separated by an \c X, enclosed in surrounding curly braces.


<hr>
\section FormatFVector2 FVector2
	- Conversion functions: OpenGUI::StrConv::toFVector2(), OpenGUI::StrConv::fromFVector2()
	- Example: ( 42.245 x 71.54 )

	General format:<BR>
	\b ( \e float_x \b x \e float_y \b )

	The parenthesis are required, and the "x" is used as a delimiter between the 2 floats. The case of the \c x is significant.


<hr>
\section FormatFRect FRect
	- Conversion functions: OpenGUI::StrConv::toFRect(), OpenGUI::StrConv::fromFRect()
	- Example: { ( 10.654 x 34.45 ) X ( 42.364 x 71.643 ) }

	General format:<BR>
	\b { \b ( \e float_min_x \b x \e float_min_y \b ) \b X \b ( \e float_max_x \b x \e float_max_y \b ) \b }

	The {, }, (, ), x, and X are required. The case of \c X and \c x is significant. This is best thought of as two FVector2's separated by an \c X, enclosed in surrounding curly braces.


<hr>
\section FormatColor Color
	- Conversion functions: OpenGUI::StrConv::toColor(), OpenGUI::StrConv::fromColor()
	- Example: 1.0:0.5:0.24:0.5
	 
	General format:<BR>
	\e float_red \b : \e float_green \b : \e float_blue \b : \e float_alpha
	
	The \e :'s are used as delimiters between the float values and are required. The values of the floats can be any positive or negative value, though generally you would want to use positive values between 0.0f and 1.0f for each component.


<hr>
\section FormatFont Font
	- Conversion functions: OpenGUI::StrConv::toFont(), OpenGUI::StrConv::fromFont()
	- Example: pecot @ 12
	 
	General format:<BR>
	\e font_name \b @ \e font_size

	The \c font_name and \c font_size are sent directly to the \ref OpenGUI::Font::Font() "Font() constructor".


<hr>
\section FormatTextAlignment TextAlignment
	- Conversion functions: OpenGUI::StrConv::toTextAlignment(), OpenGUI::StrConv::fromTextAlignment()
	- Example: Left | Bottom
	 
	General format:<BR>
	\e horizontal_alignment \b | \e vertical_alignment

	Horizontal alignment must be one of:
	 - Left
	 - Center
	 - Right
	 - Justified
	
	Vertical alignment must be one of:
	 - Top
	 - Center
	 - Bottom
	 - Justified
	 
	 Case is irrelevant, but watch your spelling.


*/
