/*!
<!-- This document is best edited with LINE WRAPPING ENABLED! -->
\page XMLDOC XML Documentation

\warning The XML specification has changed since version 0.7.7.

%OpenGUI provides a service for loading and unloading via XML configuration files. The exact specification of these XML files is highly dependent on the plugins you have loaded, as any plugin can register to handle  any XML tags, even overriding the previous functionality of a tag. For more information on this registration system and how it can affect your application, see the \ref OpenGUI::XMLParser "XMLParser" documentation. The following documentation will cover the default handling of these tags.

\note Tag and attribute names are <b>case sensitive</b>. This is different from older version of XML handling code.

\warning The XML parsers perform actions on the data <i>as they read it</i>. Meaning that you cannot create Widgets based on Widget Definitions until the definition tags have been parsed, or perform any other out-of-order operation. The XML logic is very basic by design, and it all nearly directly translates into API calls, which are noted in the tag's documentation.

<hr>

%OpenGUI comes with built in processors for several tags. These tags come in 2 flavors. Universal tags that are handled no matter where they are found, and %OpenGUI specific tags that are only handled when found within an enclosing \c \<%OpenGUI\> tag.

Universal tags:
 - \ref XMLinclude
 
%OpenGUI specific tags:
 - \<%OpenGUI\>
  - \ref XMLplugin
  - \ref XMLfont
  - \ref XMLimageset
   - \ref XMLimagery
  - \ref XMLcursordef
   - \ref XMLproperty
  - \ref XMLwidgetdef
   - \ref XMLproperty

Be sure to check out the \ref example as well.
<HR>

\section XMLinclude <Include>
Performs what is effectively an inline include of the given \c File. <i>The included file will be parsed for XML based configuration content.</i> Includes can occur absolutely anywhere that the XMLParser is in charge of handling the tag, but since it is often difficult to distinguish where the XMLParser is and is not working it is often best to use these as root level tags only.

Recursive includes are supported, but each file can only be included once per \c \<Include\> tag during recursive processing. For example, if file A includes file B, and file B includes file A then the include processing will stop after expansion of file B, as file A has already been included. Self recursive include loops are logged with warnings, but are otherwise ignored. <i>(The multiple include testing is performed using a simple case-insensitive string comparison. Minor path tricks will fool it, but are generally discouraged.)</i>

Example:
\verbatim
<Include File="metal.xml" />
\endverbatim

\par Attributes
 - \c File \b (required)
  - \em Type: string
  - \em Description: The path and filename of the XML file to include. This is passed verbatim to the ResourceManager, so anything that it can decipher can be used.


<HR>

\section XMLplugin <Plugin>
Loads a plugin by passing the given \c File to OpenGUI::PluginManager::loadPlugin().

Example:
\verbatim
<Plugin File="TachometerWidget" />
\endverbatim

\par Attributes
 - \c File \b (required)
   - \em Type: string
   - \em Description: The filename to be passed to OpenGUI::PluginManager::loadPlugin().

\see OpenGUI::PluginManager::loadPlugin() has the potential to perform filename mangling. See its documentation for more information.



<HR>

\section XMLfont <Font>
Registers a new FontSet via OpenGUI::FontManager::RegisterFontSet()

Example:
\verbatim
<Font Name="pecot" File="pecot.ttf" />
\endverbatim

\par Attributes
 - \c Name \b (required)
   - \em Type: string
   - \em Description: Name by which the font will be referenced within %OpenGUI. This does not have to be the same as the filename.
 - \c File \b (required)
   - \em Type: string
   - \em Description: The path and filename where the actual font can be located. This is passed verbatim to the ResourceManager, so anything that it can decipher can be used.




<HR>

\section XMLimageset <Imageset>
Loads the given \c File as an imageset via OpenGUI::ImageryManager::createImageset().

Example:
\verbatim
<Imageset File="tachometer.png">
	<!-- some <Imagery> tags in here -->
</Imageset>
\endverbatim

\par Attributes
 - \c File \b (required)
   - \em Type: string
   - \em Description: The path and filename where the actual image file to load can be located. This is passed verbatim to the ResourceManager, so anything that it can decipher can be used.

\note Due to the way the ImageryManager treats duplicate requests to createImageset(), duplicate entries of this tag have no ill effect, and the \<Imagery\> enclosed  within any duplicates will be added to the originally established Imageset.



<hr>
\section XMLimagery <Imagery>
Adds an Imagery to the enclosing Imageset via OpenGUI::Imageset::createImagery().
This tag \b must be enclosed by an \<Imageset\> tag or it is ignored!

Example:
\verbatim
<Imageset File="somefile">
	<Imagery Name="TachBG" Left="2" Top="2" Width="321" Height="321" />
</Imageset>
\endverbatim

\par Attributes
 - \c Name \b (required)
   - \em Type: string
   - \em Description: The name to give this Imagery object.
 - \c Left \b (required)
   - \em Type: int
   - \em Description: The X value of the upper left corner of this Imagery within the Imageset in pixels.
 - \c Top \b (required)
   - \em Type: int
   - \em Description: The Y value of the upper left corner of this Imagery within the Imageset in pixels.
 - \c Width \b (required)
   - \em Type: int
   - \em Description: The width of this Imagery within the Imageset in pixels.
 - \c Height \b (required)
   - \em Type: int
   - \em Description: The height of this Imagery within the Imageset in pixels.

\note Multiple \<Imagery\> tags with the same \c Name will redefine the Imagery as defined in OpenGUI::Imageset::createImagery().


<hr>
\section XMLcursordef <CursorDef>
Defines a Cursor of the given \c Name using the given \c BaseName and \c BaseLibrary via OpenGUI::CursorManager::DefineCursor(). Any enclosed \ref XMLproperty tags are used to define property settings that will be applied to the cursor upon creation, as per the DefineCursor() function.

Example:
\verbatim
<CursorDef Name="Square" BaseName="Generic" BaseLibrary="OpenGUI">
	<Property ValueName="Size" ValueType="FVECTOR2" ValueData="(100x100)" />
	<Property ValueName="Imagery" ValueType="STRING" ValueData="TachBG" />
	<Property ValueName="Offset" ValueType="IVECTOR2" ValueData="(160x160)" />
</CursorDef>
\endverbatim

\par Attributes
 - \c Name \b (required)
   - \em Type: string
   - \em Description: The name to give this cursor definition
 - \c BaseName \b (required)
   - \em Type: string
   - \em Description: Name of the base cursor as it was originally registered.
 - \c BaseLibrary \b (required)
   - \em Type: string
   - \em Description: Library of the base cursor as it was originally registered.

\warning Multiple cursor definitions with the same name will result in an error.


<hr>
\section XMLwidgetdef <WidgetDef>
Defines a Widget of the given \c Name using the given \c BaseName and \c BaseLibrary via OpenGUI::WidgetManager::DefineWidget(). Any enclosed \ref XMLproperty tags are used to define property settings that will be applied to the widget upon creation, as per the DefineWidget() function.

Example:
\verbatim
<WidgetDef Name="Tachometer" BaseName="Tachometer" BaseLibrary="OpenGUIEx">
</WidgetDef>
\endverbatim

\par Attributes
 - \c Name \b (required)
   - \em Type: string
   - \em Description: The name to give this widget definition
 - \c BaseName \b (required)
   - \em Type: string
   - \em Description: Name of the base widget as it was originally registered.
 - \c BaseLibrary \b (required)
   - \em Type: string
   - \em Description: Library of the base widget as it was originally registered.
   
\warning Multiple widget definitions with the same name will result in an error.


<hr>
\section XMLproperty <Property>
These tags are \b not processed by XMLParser directly, but are rather processed in DOM style by their containing tag processor. However, their format is standard throughout %OpenGUI for consistency purposes. For the most part, these tags are loaded into OpenGUI::Value objects via OpenGUI::Value::LoadFromXMLNode(), and are stored for later use as property assignments for the object definition that contained them.

Example:
\verbatim
<Property ValueName="Size" ValueType="FVECTOR2" ValueData="(100x100)" />
\endverbatim

\par Attributes
 - \c ValueName \b (required)
   - \em Type: string
   - \em Description: The name to give the Value object, which when used is applied to an object property of the same name.
 - \c ValueType \b (required)
   - \em Type: string
   - \em Description: Identifies the type of data stored in ValueData
 - \c ValueData \b (required)
   - \em Type: variable
   - \em Description: A string formated %OpenGUI \ref Types "type"
   
<hr>



\section example Example Config File
The following is an example xml file. It is listed here in its entirety so that you can get an idea of what a common config file looks like.
\verbatim
<?xml version="1.0" ?>
<OpenGUI>
	<Plugin File="TachometerWidget" />
	
	<Font Name="pecot" File="pecot.ttf" />

	<Imageset File="tachometer.png">
		<Imagery Name="TachBG" Left="2" Top="2" Width="321" Height="321" />
		<Imagery Name="TachNeedle" Left="42" Top="348" Width="131" Height="7" />
	</Imageset>


	<CursorDef Name="Square" BaseName="Generic" BaseLibrary="OpenGUI">
		<Property ValueName="Size" ValueType="FVECTOR2" ValueData="(100x100)" />
		<Property ValueName="Imagery" ValueType="STRING" ValueData="TachBG" />
		<Property ValueName="Offset" ValueType="IVECTOR2" ValueData="(160x160)" />
	</CursorDef>
	
	<WidgetDef Name="Tachometer" BaseName="Tachometer" BaseLibrary="OpenGUIEx">
	</WidgetDef>
</OpenGUI>
\endverbatim

\note The \<?xml version="1.0" ?\> line is not required by TinyXML, but you may want to add it anyways.

*/