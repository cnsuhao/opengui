
/*!
	\page BaseWidgets Base Widgets
	\todo Add a \#define in OpenGUI_CONFIG.h to toggle building of default widgets.
	
	This is the complete list of the base widgets that come built in to OpenGUI.
	These widgets are extremely basic, most of them only performing imagery
	replacement for different states. The goal of the base widgets is to provide
	code examples for custom widget creation, while being functionally complete
	enough for making very basic GUIs.
	
	In order to access the C++ interfaces to the base widgets that come built
	directly into %OpenGUI you must include \c OpenGUI_BaseWidgets.h. This is only
	required for access the native class interfaces. You can always perform
	the same operations using the property system instead, which is always accessible
	anywhere that \c OpenGUI.h has been included.
	
	\note Only the widgets that have links to more detailed documentation are
		finished at this time. All others are in varying states of completion.
	<HR>
	- \subpage BW_StaticImage "StaticImage"
	- \subpage BW_SimpleButton "SimpleButton"
	- Label (static text)
	- \subpage BW_ScalingImage "ScalingImage"
	- CheckBox
	- RadioButton
	- ProgressBar

*/

/*!
	\page BW_StaticImage StaticImage
	
	- widgetGroup: "OpenGUI"
	- widgetType:  "StaticImage"
	
	\section Description
	Draws a static image to the screen. The image is stretched to completely will the widget.
	Pixel alignment must be performed manually if it is desired.
	
	\see Class Documentation: OpenGUI::Widgets::StaticImage
	
	\section Properties
	- Position : FVector2
	- Size : FVector2
	- Enabled : Boolean
	- Imagery : String

	\section Usage	
	Example XML:
\code
<Widget name="myStaticImage" group="OpenGUI" type="StaticImage">
	<Property name="Imagery" value="myImagery" />
	<Property name="position" value="(0.59875 x 0.465)" />
	<Property name="size" value="(0.40125 x 0.535)" />
</Widget>
\endcode

	Example Code:
\code
Widgets::StaticImage* staticImage = 
	static_cast<Widgets::StaticImage*>( System::getSingleton().createWidget("StaticImage","OpenGUI") );
staticImage->setImagery("myImagery");
staticImage->setPos( 0.59875f, 0.465f );
staticImage->setSize( 0.40125f, 0.535f );
\endcode
*/



/*!
	\page BW_ScalingImage ScalingImage
	
	- widgetGroup: "OpenGUI"
	- widgetType:  "ScalingImage"
	
	\section Description
	Draws a static image to the screen much like StaticImage, but in such a way that pixel stretching is contained to predefined "acceptable" areas. The drawn image is comprised of 9 zones, each of which is actually defined as independent Imagery.
	
	List of zones and stretch method performed:
	- Upper Left (no stretching)
	- Upper Middle (stretches in X only)
	- Upper Right (no stretching)
	- Middle Left (stretches in Y only)
	- Middle Middle (center area)
	- Middle Right (stretches in Y only)
	- Lower Left (no stretching)
	- Lower Middle (stretches in X only)
	- Lower Right (no stretching)
	
	\image html ScalingImage_streching.jpg
	
	
	\see Class Documentation: OpenGUI::Widgets::ScalingImage
	
	\section Properties
	- Position : FVector2
	- Size : FVector2
	- Enabled : Boolean
	- Imagery_UL : String
	- Imagery_UM : String
	- Imagery_UR : String
	- Imagery_ML : String
	- Imagery_MM : String
	- Imagery_MR : String	
	- Imagery_LL : String
	- Imagery_LM : String
	- Imagery_LR : String

	\section Usage	
	Example XML:
\code
<Widget name="myScalingImage" group="OpenGUI" type="ScalingImage">
	<Property name="Imagery_UL" value="myImageryUL" />
	<Property name="Imagery_UM" value="myImageryUM" />
	<Property name="Imagery_UR" value="myImageryUR" />
	<Property name="Imagery_ML" value="myImageryUL" />
	<Property name="Imagery_MM" value="myImageryUM" />
	<Property name="Imagery_MR" value="myImageryUR" />
	<Property name="Imagery_LL" value="myImageryLL" />
	<Property name="Imagery_LM" value="myImageryLM" />
	<Property name="Imagery_LR" value="myImageryLR" />
	
	<Property name="position" value="(0.59875 x 0.465)" />
	<Property name="size" value="(0.40125 x 0.535)" />
</Widget>
\endcode

	Example Code:
\code
Widgets::ScalingImage* scalingImage = 
	static_cast<Widgets::ScalingImage*>( System::getSingleton().createWidget("ScalingImage","OpenGUI") );
scalingImage->setImagery_UL("myImageryUL");
scalingImage->setImagery_UM("myImageryUM");
scalingImage->setImagery_UR("myImageryUR");
scalingImage->setImagery_ML("myImageryML");
scalingImage->setImagery_MM("myImageryMM");
scalingImage->setImagery_MR("myImageryMR");
scalingImage->setImagery_LL("myImageryLL");
scalingImage->setImagery_LM("myImageryLM");
scalingImage->setImagery_LR("myImageryLR");

scalingImage->setPos( 0.59875f, 0.465f );
scalingImage->setSize( 0.40125f, 0.535f );
\endcode
*/




/*!
	\page BW_SimpleButton SimpleButton
	
	- widgetGroup: "OpenGUI"
	- widgetType:  "SimpleButton"
	
	\section Description
	Provides a very simple button functionality that is purely imagery based.
	This widget provides absolutely no text on the button, it only provides
	state imagery.
	
	\see Class Documentation: OpenGUI::Widgets::SimpleButton
	
	\section Properties
	- Position : FVector2
	- Size : FVector2
	- Enabled : Boolean
	- Imagery : String
	- ImageryPressed : String
	- ImageryMouseOver : String
	- ImageryDisabled : String

	\section Usage	
	Example XML:
\code
<Widget name="myStaticImage" group="OpenGUI" type="SimpleButton">
	<Property name="Imagery" value="myImagery" />
	<Property name="ImageryPressed" value="myImagery_Pressed" />
	<Property name="ImageryMouseOver" value="myImagery_MouseOver" />
	<Property name="ImageryDisabled" value="myImagery_Disabled" />
	<Property name="position" value="(0.59875 x 0.465)" />
	<Property name="size" value="(0.40125 x 0.535)" />
</Widget>
\endcode

	Example Code:
\code
Widgets::SimpleButton* simpleButton = 
	static_cast<Widgets::SimpleButton*>( System::getSingleton().createWidget("SimpleButton","OpenGUI") );
simpleButton->setImagery("myImagery");
simpleButton->setImagery("myImagery_Pressed");
simpleButton->setImagery("myImagery_MouseOver");
simpleButton->setImagery("myImagery_Disabled");
simpleButton->setPos( 0.59875f, 0.465f );
simpleButton->setSize( 0.40125f, 0.535f );
\endcode
*/