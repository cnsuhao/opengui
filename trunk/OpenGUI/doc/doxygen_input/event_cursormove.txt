namespace OpenGUI{
/*!
\page Event_CursorMove CursorMove

This event is common to both widgets and cursors, so both are explained here.

\section Event_CursorMove_Widget Widget
The primary cursor movement event, signifying cursor movement within the coverage area of a widget as indicated by its Widget::isInside() function. The position coordinates in the event are always in Widget level coordinates. This event only occurs if all of the following conditions are met.

- All parents have fully processed the \ref Event_CursorMoving "CursorMoving" event without consuming it
- No other widget has yet consumed the event
- The coordinates of the event are within the coverage area of the widget as defined by the widget's isInside() function. <SMALL>(The coordinate restriction can be lifted by obtaining cursor focus)</SMALL>

Consuming this event ends the propagation of the cursor movement event, in which case peers will not receive \ref Event_CursorMove "CursorMove" or \ref Event_CursorMoving "CursorMoving", but will process a \ref Event_CursorLeave "CursorLeave" if applicable. Most controls will want to consume this event, and this behavior is the default action within Control::onCursorMove().

\par Introduced In:
Widget
- Widget::onCursorMove
- Widget::eventCursorMove
\par EventArgs:
Cursor_EventArgs

<HR>

\section Event_CursorMove_Cursor Cursor
Informs the the current visible cursor of a cursor move event. The position coordinates in the event are always in Screen level coordinates. While the cursor version of this event reuses the same Cursor_EventArgs, cursors cannot consume events. So whether you \c eat() the event or not makes no difference.

\par Introduced In:
Cursor
- Cursor::onCursorMove
- Cursor::eventCursorMove
\par EventArgs:
Cursor_EventArgs
*/
}
