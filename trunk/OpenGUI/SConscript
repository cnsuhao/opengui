# Build Script for OpenGUI
import os
import fnmatch


# Source files (and yes, this is indeed much like cheating)
files = os.listdir(".")
Source = fnmatch.filter(files,"*.cpp")

CPPPATH = """
	#/dependencies/tinyxml
	#/dependencies/freetype2/include
	"""
LIBPATH_D = """
	#/dependencies/tinyxml/Debug
	#/dependencies/freetype2/objs
	"""
	
LIBPATH_R = """
	#/dependencies/tinyxml/Release
	#/dependencies/freetype2/objs
	"""

LIBS_D = """
	Winmm.lib
	tinyxml_d.lib
	freetype_d.lib
	"""

LIBS_R = """
	Winmm.lib
	tinyxml.lib
	freetype.lib
	"""

OUTFILE = 'OpenGUI'



################################################################
CPPPATH = Split(CPPPATH)
Import('platform')
Import('G_CPPFLAGS')
cppflags = G_CPPFLAGS

Import('G_CPPDEFINES')
cppdefine = G_CPPDEFINES + ['_USRDLL', 'OPENGUI_EXPORTS']

cpppath = Split(CPPPATH)


Import('debug')
if debug:
	OUTFILE = OUTFILE + '_d'
	libpath = LIBPATH_D
	libs = Split(LIBS_D)
else:
	libpath = LIBPATH_R
	libs = Split(LIBS_R)




Import('G_LIBPATH')
libpath = G_LIBPATH + Split(libpath)

env = Environment()
env.Replace(CPPPATH = CPPPATH)
env['PDB'] = OUTFILE + '.pdb'
env.Append(CPPFLAGS = cppflags)
env.Append(CPPDEFINES = cppdefine)
env.Append(LIBPATH = libpath)
env.Append(LIBS = libs)

lib = env.SharedLibrary( OUTFILE, Split(Source) )


if debug:
	env.Install('#/Debug', lib)
else:
	env.Install('#/Release', lib)

