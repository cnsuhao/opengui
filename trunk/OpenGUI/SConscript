# Build Script for OpenGUI
import os
import fnmatch


# Source files (and yes, this is indeed much like cheating)
files = os.listdir(".")
Source = fnmatch.filter(files,"*.cpp")

CPPPATH = """
	#/deps/tinyxml
	#/deps/freetype2/include
	"""
LIBPATH_D = """
	#/deps/tinyxml
	#/deps/freetype2/objs
	"""
	
LIBPATH_R = """
	#/deps/tinyxml
	#/deps/freetype2/objs
	"""

LIBS_D = """
	Winmm.lib
	tinyxml_d.lib
	freetype_d.lib
	"""

LIBS_R = """
	Winmm.lib
	tinyxml.lib
	freetype.lib
	"""

OUTFILE = 'OpenGUI'



################################################################
Import('platform')
Import('base_env')
env = base_env.Copy()


Import('debug')
if debug:
	OUTFILE = OUTFILE + '_d'
	libpath = Split(LIBPATH_D)
	libs = Split(LIBS_D)
else:
	libpath = Split(LIBPATH_R)
	libs = Split(LIBS_R)



cppdefine = ['_USRDLL', 'OPENGUI_EXPORTS']
env.Append(CPPDEFINES = cppdefine)
env.Append(CPPPATH = Split(CPPPATH))
env.Append(LIBPATH = libpath)
env.Append(LIBS = libs)


env['PDB'] = OUTFILE + '.pdb'


lib = env.SharedLibrary( OUTFILE, Source )



if debug and platform == "win32":
	env.SideEffect(OUTFILE + '.ilk', lib)
	Clean(lib, OUTFILE + '.ilk')

final = []
final += env.Install('#/bin', [OUTFILE + '.dll',OUTFILE + '.pdb'] )
final += env.Install('#/lib', OUTFILE + '.lib')
final += env.Install('#/Renderers/OpenGL/bin', [OUTFILE + '.dll',OUTFILE + '.pdb'] )
Alias('opengui',final)
