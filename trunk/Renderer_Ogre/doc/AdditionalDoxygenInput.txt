/*!
\mainpage Renderer_Ogre Documentation

\image html logo.jpg
\image html Ogre-logo.gif

Renderer_Ogre is an %OpenGUI Renderer implementation that allows %OpenGUI to
draw to the screen under the Ogre rendering engine, and provides a certain level
of automation to ensure your GUIs are always updated when necessary.

- \subpage Integrating "Using Renderer_Ogre in an Ogre application"

<hr>	
\note
Renderer_Ogre is distributed using the  BSD license so that both amateur and
professional developers can benefit from its use. The exact copy of
this license can be found in the file LICENSE.TXT that is distributed with the
source code, or by clicking \link License here.\endlink
*/




/*!
\page License
Renderer_Ogre is distributed as part of the %OpenGUI project, and is freely
usable/distributable under the BSD license, the contents of which follow:
<HR>
\verbinclude LICENSE.TXT
<BR><HR><BR>

Renderer_Ogre utilizes the Ogre rendering engine, which was release under the
<a href="http://opensource.org/licenses/lgpl-license.php">LGPL</a> at the time
of this writing.

Ogre Website: http://www.ogre3d.org/

Proper licensing of the Ogre library is your own responsiblity. All Ogre related
media, such as the Ogre logo, are the sole property of the Ogre project, and are
subject to licensing as designated by that project.
*/



/*! \page Integrating Integrating Renderer_Ogre

Renderer_Ogre can be easily added to an existing Ogre application. The process for
doing so is defined below.

<hr>

\section IncludeFiles Include files
You will need to set up include search paths for Renderer_Ogre, %OpenGUI, and Ogre
before using Renderer_Ogre. After you have done that, you should be able to include
"Renderer_Ogre.h", and "OpenGUI.h" without much trouble. (Order doesn't matter)

It may be important to note that %Renderer_Ogre.h includes both %OpenGUI.h, as well
as some specific include files from Ogre. You will want to keep this in mind
as it may cause issues with Ogre's built in memory manager.

\note Renderer_Ogre was originally built with Ogre's memory manager disabled, so if you
run into problems, try turning it off. There are other methods of leak checking
available, so don't feel tied down to it. We test the renderer for compatibility with
the Ogre SDKs (which currently has the memory manager enabled), but the uniqueness of
your application may induce previously unknown issues.
	
	Example include layout:
\verbatim
#include <Ogre.h>
#include <OpenGUI.h>
#include <Renderer_Ogre.h>
\endverbatim

<hr>

\section Linking Linking
Using Renderer_Ogre requires libraries from Ogre, %OpenGUI, and Renderer_Ogre. Be sure to set
up the correct library paths for your linker.

Linking with OgreFusion will require:\n
\b Debug: OgreMain_d.lib, OpenGUI_d.lib and Renderer_Ogre_d.lib\n
\b Release: OgreMain.lib, OpenGUI.lib and Renderer_Ogre.lib

<hr>

\section Runtime Runtime Requirements
After you've compiled and linked you application, you will need to ensure that the following
DLLs are available to the application:\n
\b Debug: OgreMain_d.dll, OpenGUI_d.dll and Renderer_Ogre_d.dll\n
\b Release: OgreMain.dll, OpenGUI.dll and Renderer_Ogre.dll\n

<hr>
	
\section Init Initialization
Creating the linkage between %OpenGUI and Ogre can be done in just a few lines of code.
This should be done after Ogre has been initialized and an Ogre::RenderSystem has been
selected.
\verbatim

// This must be a pointer to the Ogre Root object
// Ogre::Root* ogreRoot;

// This must be a pointer to the Ogre RenderSystem
// Ogre::RenderSystem* ogreRenderSystem

OpenGUI::OgreRenderer* myRenderer = new OpenGUI::OgreRenderer(ogreRoot, ogreRenderSystem);
OpenGUI::OgreResourceProvider* myResourceProvider = new OpenGUI::OgreResourceProvider();
OpenGUI::System* mySystem = new OpenGUI::System(myRenderer, myResourceProvider);
\endverbatim

And that's it! After you've done %OpenGUI will be called every frame to update its
internal timing, and will automatically refresh the GUI for a viewport after the Viewport's
frame has ended. On top of that, your GUI assets (such as xml layout files, and textures)
will be loaded directly out of Ogre's resource system.

\note
Both the Ogre::Root and Ogre::RenderSystem are optional parameters. However, Renderer_Ogre
requires these to run, and it will attempt to obtain them through Singleton access if you do
not provide them. There is no way to change the Root or RenderSystem pointers after you have
initialized Renderer_Ogre.

\see
OpenGUI::OgreRenderer::setTextureResourceGroup() and OpenGUI::OgreResourceProvider::setResourceGroup()
for information on changing the Ogre resource groups used when loading textures and other %OpenGUI assets.

<hr>

\section DeInit Destruction
When shutting down your application, failure to destroy objects in the correct order can lead
to crashes and other errors. The proper destruction order when using OgreFusion is:

 - %OpenGUI
 - Renderer_Ogre
 - Ogre

<hr>

That should cover everything you need to know about using OpenGUI with Ogre in your application
via the Renderer_Ogre. If you run into trouble, try the following online resources for help:

 - OpenGUI website (forums and wiki): http://opengui.sourceforge.net/
 - Ogre website (forums and wiki): http://www.ogre3d.org/

*/
