# SConscript for inclusion into existing builds

# Note: If you want to specify your own build environment then you
#       need to provide it as a SCons Export() called 'base_env'.



OUTFILE = 'glfw'
VERMAJOR = 2
VERMINOR = 5
Export('OUTFILE')

try:
	Import('GLFW_NATIVE_BUILD')
except:
	GLFW_NATIVE_BUILD = False

############### PLATFORM DETECTION ################
platform = str(ARGUMENTS.get('OS', Platform()))
print "Detected Platform: " + platform 
Export('platform')


############ COMPILER SUITE DETECTION #############
try:
	Import('base_env')
except:
	base_env = False

if not bool(base_env):
	base_env = Environment() # initial creation for compiler detection
	if base_env.has_key('MSVS'):
		print 'Visual Studio Detected...',
		ver = ARGUMENTS.get('VS', 0)
		if bool(ver):
			print 'Requesting VS version: ' + ver,
			tmpenv = Environment(MSVS_VERSION=ver)
			msvs = tmpenv['MSVS']
			if msvs.has_key('VCINSTALLDIR') and msvs.has_key('VSINSTALLDIR'):
				print '...FOUND!',
				base_env = tmpenv
			else:
				print '...NOT FOUND! Aborting!'
				Exit(-1)
		print 'Using MSVS ' + base_env['MSVS']['VERSION']
		if base_env['MSVS']['VERSION'] == "8.0":
			# These will embed the manifests when we're using Visual Studio 2005
			base_env['LINKCOM']=[base_env['LINKCOM'], 'mt.exe -manifest ${TARGET}.manifest -outputresource:${TARGET};2']
			base_env['SHLINKCOM']=[base_env['SHLINKCOM'], 'mt.exe -manifest ${TARGET}.manifest -outputresource:${TARGET};2']
if not (bool(base_env['CC']) and bool(base_env['CXX']) and bool(base_env['LINK'])):
	print 'Compiler or linker was not detected! Abort!'
	Exit(-1)



########## SELECT DEBUG / RELEASE MODE ############
# detect debug/release and export the flag
debug = bool( ARGUMENTS.get('debug', 0) )
Export('debug')
if debug:
	if GLFW_NATIVE_BUILD: print "Build Mode: DEBUG"
else:
	if GLFW_NATIVE_BUILD: print "Build Mode: RELEASE"


############ PLATFORM SPECIFIC FLAGS ##############
# At this point, we determine platform and perform special operations based on that

if platform == "win32":
	G_CCFLAGS_DBG       = Split('/nologo /c /Gs /W3 /MDd /Ods')
	G_CCFLAGS_REL       = Split('/nologo /c /Gs /W3 /MD  /Oxs')
	G_CCFLAGS_DBG_FAST  = Split('/nologo /c /Gs /W3 /MDd /Odt')
	G_CCFLAGS_REL_FAST  = Split('/nologo /c /Gs /W3 /MD  /Oxt')
	G_CPPDEFINES        = Split('WIN32 _WINDOWS _CRT_SECURE_NO_DEPRECATE')
	G_CPPDEFINES_SHARED = Split('GLFW_BUILD_DLL')
	G_SHARED_LINKLIBS   = Split('opengl32.lib user32.lib')
	G_SHARED_LINKFLAGS  = Split('/version:'+str(VERMAJOR)+'.'+str(VERMINOR))
	

if platform == 'posix':
	G_CCFLAGS_DBG       = Split('')
	G_CCFLAGS_REL       = Split('')
	G_CCFLAGS_DBG_FAST  = Split('')
	G_CCFLAGS_REL_FAST  = Split('')
	G_CPPDEFINES        = Split('')
	G_CPPDEFINES_SHARED = Split('')
	G_SHARED_LINKLIBS   = Split('')
	G_SHARED_LINKFLAGS  = Split('')

###################################################
fast_env = base_env.Copy() # second compiler flags for fast sources

if debug:
	base_env.Append(CCFLAGS=G_CCFLAGS_DBG)
	base_env.Append(CPPDEFINES=G_CPPDEFINES)
	fast_env.Append(CCFLAGS=G_CCFLAGS_DBG_FAST)
	fast_env.Append(CPPDEFINES=G_CPPDEFINES)
else:
	base_env.Append(CCFLAGS=G_CCFLAGS_REL)
	base_env.Append(CPPDEFINES=G_CPPDEFINES)
	fast_env.Append(CCFLAGS=G_CCFLAGS_REL_FAST)
	fast_env.Append(CPPDEFINES=G_CPPDEFINES)


Export('base_env')
Export('fast_env')

# We also need another set of build environments for shared lib generation
base_env_s = base_env.Copy()
fast_env_s = fast_env.Copy()
base_env_s.Append(CPPDEFINES=G_CPPDEFINES_SHARED)
fast_env_s.Append(CPPDEFINES=G_CPPDEFINES_SHARED)
base_env_s.Append(LIBS=G_SHARED_LINKLIBS)
fast_env_s.Append(LIBS=G_SHARED_LINKLIBS)
base_env_s.Append(LINKFLAGS=G_SHARED_LINKFLAGS)
fast_env_s.Append(LINKFLAGS=G_SHARED_LINKFLAGS)

Export('base_env_s')
Export('fast_env_s')

out = SConscript('lib/SConscript')
SConscript('examples/SConscript')
Return('out')
