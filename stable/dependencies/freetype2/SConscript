### Freetype SConscript ###
Import('platform') # needed early for source file selection

Source = """
	src/autofit/autofit.c
	src/bdf/bdf.c
	src/cff/cff.c
	src/base/ftbase.c
	src/base/ftbitmap.c
	src/cache/ftcache.c
	src/base/ftglyph.c
	src/gzip/ftgzip.c
	src/base/ftinit.c
	src/lzw/ftlzw.c
	src/base/ftstroke.c
	src/base/ftsystem.c
	src/smooth/smooth.c
	src/base/ftmm.c
	src/pcf/pcf.c
	src/pfr/pfr.c
	src/psaux/psaux.c
	src/pshinter/pshinter.c
	src/psnames/psmodule.c
	src/raster/raster.c
	src/sfnt/sfnt.c
	src/truetype/truetype.c
	src/type1/type1.c
	src/cid/type1cid.c
	src/type42/type42.c
	src/winfonts/winfnt.c
	"""

if platform == 'win32': # special win32 file
	Source += " builds/win32/ftdebug.c"

CPPPATH = """
	include
	"""
LIBPATH_D = """
	"""
	
LIBPATH_R = """
	"""

LIBS_D = """
	"""

LIBS_R = """
	"""

OUTFILE = 'freetype'



################################################################
Import('base_env')
env = base_env.Copy()

cppdefine = ['_LIB']

Import('debug')
if debug:
	OUTFILE = OUTFILE + '_d'
	libpath = Split(LIBPATH_D)
	libs = Split(LIBS_D)
	cppdefine += ['FT_DEBUG_LEVEL_ERROR','FT_DEBUG_LEVEL_TRACE']
else:
	libpath = Split(LIBPATH_R)
	libs = Split(LIBS_R)


env.Append(CPPDEFINES = cppdefine)
env.Replace(CPPPATH = Split(CPPPATH))
env.Append(LIBPATH = libpath)
env.Append(LIBS = libs)

if platform == "win32":
	env['PDB'] = OUTFILE + '.pdb'


lib = env.StaticLibrary( OUTFILE, Split(Source) )

if debug:
	inst = env.Install('objs', lib)
	Alias('freetype', inst)
else:
	inst = env.Install('objs', lib)
	Alias('freetype', inst)

