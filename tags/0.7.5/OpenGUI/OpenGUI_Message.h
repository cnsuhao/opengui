#ifndef C64830B9_7FE3_4a19_B3FA_DB9B4ACAC897
#define C64830B9_7FE3_4a19_B3FA_DB9B4ACAC897


namespace OpenGUI{
	class Element; //forward declaration

	//! Holds message system specific objects.
	namespace Msg{
		
		/*! \brief
			The struct for the alert message type.
			Alerts are messages generated by Widgets.
			See \ref MessageTypesAlerts "here" for a detailed explanation on alerts.
		*/
		struct Message_Alert{
			Element* source; //!<source
			int type;//!< type
			void* alertData; //!< additional alert specific data
		};

		struct Message_Event{
			typedef enum{
			//! Mouse button went down.
			ME_MouseButtonDown,
			//! Mouse button went up.
			ME_MouseButtonUp,
			//! Mouse button went down and up within the same element.
			ME_MouseClick,
			//! Mouse button went down and up within the same element twice in rapid succession.
			ME_MouseDblClick,
			//! Mouse has moved.
			ME_MouseMove, 
			//! Mouse has entered an element.
			ME_MouseEnter,
			//! Mouse has left an element.
			ME_MouseLeave,
			//! A key pushed down.
			ME_KeyDown,
			//! A key that was previously pressed was released.
			ME_KeyUp,
			//! A key was theoretically pressed and released. This can occur multiple times between KeyDown and KeyUp due to typematic processing.
			ME_KeyStroke,
			//! This event is called every frame, and is sent to every attached element.
			ME_Tick,
			//! This event is sent globally to all Elements within a GUISheet directly after the GUISheet becomes the active GUISheet. eventData will be 0
			ME_GUISheetActivate,
			//! This event is sent globally to all Elements within a GUISheet directly before the GUISheet is removed from active state. eventData will be 0
			ME_GUISheetDeactivate
		} EventType;

			Element* destination;//!<dest
			EventType type;//!< type
			void* eventData; //!< additional event specific data
		};

		//! The Message struct is the backbone of the message system in OpenGUI.
		struct Message{
			typedef enum{
				MT_EVENT,
				MT_ALERT
			} MessageType;
			MessageType messageType;
			union{
				Message_Event event;
				Message_Alert alert;
			};
		};
	};//namespace Msg{
};//namespace OpenGUI{


#endif

