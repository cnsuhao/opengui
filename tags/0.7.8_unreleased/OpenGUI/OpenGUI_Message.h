#ifndef C64830B9_7FE3_4a19_B3FA_DB9B4ACAC897
#define C64830B9_7FE3_4a19_B3FA_DB9B4ACAC897


namespace OpenGUI{
	class Element; //forward declaration

	//! Holds message system specific objects.
	namespace Msg{
		
		/*! \brief
			The struct for the alert message type.
			Alerts are messages generated by Widgets.
			See \ref MessageTypesAlerts "here" for a detailed explanation on alerts.
			\see Message_Event for documentation on events.
		*/
		struct Message_Alert{
			//! This enum defines some predesignated alert types that can be generated by Widgets.
			typedef enum{
				MA_Clicked //!< Widget was pressed like a button, or a click style selection occurred (like radio buttons). No alertData.
			} AlertType;

			//! Pointer to the Element / Widget that issued the alert.
			/*! This will be a pointer to the alert generating Element or Widget. This
				should never be 0.
			*/
			Element* source;
			//! Alert type identifier.
			/*! This integer identifies the type of the alert. Since a Widget can generate any
				number of different alerts based on its design and function, it is entirely up
				to he alert generating Widget to set this value. 
				\see AlertType for a list of built in alert type IDs. Widget writers can also
				use negative values for custom alert types that are not covered under the built in
				IDs.
				\warning Widget writers should \b only use negative integers for their custom alert type ids.
				Positive values are reserved by %OpenGUI for use in default alert types. Widget writers
				should attempt to avoid the use of custom alert types where possible.
			*/
			int type;
			//! Pointer to a custom data struct for additional data about the Alert
			/*! If the alert type specification dictates that additional data is available/required
				for the alert, then this will be a pointer to that data struct.

				Alerts that contain additional data should be documented as having such, and should
				document the struct layout.
			*/
			void* alertData;
		};

		/*! \brief
		The struct for the event message type.
		Events are messages generated by OpenGUI.
		See \ref MessageTypesEvents "Event Types" for a detailed explanation on individual events.
		\see Message_Alert for documentation on alerts.
		*/
		struct Message_Event{
			//! Lists the possible event types OpenGUI will generate.
			typedef enum{
			//! Mouse button went down.
			ME_MouseButtonDown,
			//! Mouse button went up.
			ME_MouseButtonUp,
			//! Mouse button went down and up within the same element.
			ME_MouseClick,
			//! Mouse button went down and up within the same element twice in rapid succession.
			ME_MouseDblClick,
			//! Mouse has moved.
			ME_MouseMove, 
			//! Mouse has entered the \c destination element.
			ME_MouseEnter,
			//! Mouse has left the \c destination element.
			ME_MouseLeave,
			//! A key pushed down.
			ME_KeyDown,
			//! A key that was previously pressed was released.
			ME_KeyUp,
			//! A key was theoretically pressed and released. This can occur multiple times between KeyDown and KeyUp due to typematic processing.
			ME_KeyStroke,
			//! This event is called every frame, and is sent to every attached element.
			ME_Tick,
			//! This event is sent globally to all Elements within a GUISheet directly after the GUISheet becomes the active GUISheet. eventData will be 0
			ME_GUISheetActivate,
			//! This event is sent globally to all Elements within a GUISheet directly before the GUISheet is removed from active state. eventData will be 0
			ME_GUISheetDeactivate
		} EventType;

			Element* destination;//!< The intended destination Element / Widget of this event. 0 for global events.
			EventType type;//!< The type of the event.
			void* eventData; //!< Additional event specific data. See \ref MessageTypesEvents "Event Types" for a detailed explanation on individual events.
		};

		//! The Message struct is the backbone of the message system in OpenGUI.
		/*! This struct is a generic container for Events and Alerts, as well as provides
			a method of message type identification.
		*/
		struct Message{
			//! Enum for identifying message type.
			typedef enum{
				MT_EVENT, //!< message is an Event
				MT_ALERT //!< message is an Alert
			} MessageType;

			//! The content type of this message.
			MessageType messageType;

			//! Holds the actual contents of the message
			union{
				Message_Event event; //!< Contains message contents if \c messageType == MT_EVENT
				Message_Alert alert; //!< Contains message contents if \c messageType == MT_ALERT
			};
		};
	};//namespace Msg{
};//namespace OpenGUI{


#endif

