/*!
<!-- This document is best edited with LINE WRAPPING ENABLED! -->
\page XMLDOC XML Documentation

\warning The XML specification has changed since version 0.7.7.

%OpenGUI provides a service for loading and unloading via XML configuration files. The exact specification of these XML files is highly dependent on the plugins you have loaded, as any plugin can register to handle  any XML tags, even overriding the previous functionality of a tag. For more information on this registration system and how it can affect your application, see the \ref OpenGUI::XMLParser "XMLParser" documentation. The following documentation will cover the default handling of these tags.

\note Tag and attribute names are <b>case sensitive</b>. This is different from older version of XML handling code.

\warning The XML parsers perform actions on the data <i>as they read it</i>. Meaning that you cannot create Widgets based on Widget Definitions until the definition tags have been parsed, or perform any other out-of-order operation. The XML logic is very basic by design, and it all nearly directly translates into API calls, which are noted in the tag's documentation.

<hr>

%OpenGUI comes with built in processors for several tags. These tags come in 2 flavors. Universal tags that are handled no matter where they are found, and %OpenGUI specific tags that are only handled when found within an enclosing \c \<%OpenGUI\> tag.

Universal tags:
 - \ref XMLinclude
 
%OpenGUI specific tags (usage hierarchy preserved):
 - \<%OpenGUI\>
  - \ref XMLplugin
  - \ref XMLfont
  - \ref XMLimageset
   - \ref XMLimagery
  - \ref XMLcursordef
   - \ref XMLproperty
  - \ref XMLwidgetdef
   - \ref XMLproperty
  - \ref XMLformdef
   - \ref XMLproperty
   - \ref XMLwidget
    - \ref XMLproperty
    - \ref XMLwidget
     - \ref XMLproperty
     - ...
  - \ref XMLface
   - \ref XMLrow
    - \ref XMLslice
  - \ref XMLscreen
   - \ref XMLwidget
    - \ref XMLproperty
    - \ref XMLwidget
     - \ref XMLproperty
     - ...
   - \ref XMLform

Be sure to check out the \ref example as well.
<HR>

\section XMLinclude <Include>
Performs what is effectively an inline include of the given \c File. <i>The included file will be parsed for XML based configuration content.</i> Includes can occur absolutely anywhere that the XMLParser is in charge of handling the tag, but since it is often difficult to distinguish where the XMLParser is and is not working it is often best to use these as root level tags only.

Recursive includes are supported, but each file can only be included once per \c \<Include\> tag during recursive processing. For example, if file A includes file B, and file B includes file A then the include processing will stop after expansion of file B, as file A has already been included. Self recursive include loops are logged with warnings, but are otherwise ignored. <i>(The multiple include testing is performed using a simple case-insensitive string comparison. Minor path tricks will fool it, but are generally discouraged.)</i>

Example:
\verbatim
<Include File="metal.xml" />
\endverbatim

\par Attributes
 - \c File (required)
  - \em Type: string
  - \em Description: The path and filename of the XML file to include. This is passed verbatim to the ResourceManager, so anything that it can decipher can be used.


<HR>

\section XMLplugin <Plugin>
Loads a plugin by passing the given \c File to OpenGUI::PluginManager::loadPlugin().

Example:
\verbatim
<Plugin File="TachometerWidget" />
\endverbatim

\par Attributes
 - \c File (required)
   - \em Type: string
   - \em Description: The filename to be passed to OpenGUI::PluginManager::loadPlugin().

\see OpenGUI::PluginManager::loadPlugin() has the potential to perform filename mangling. See its documentation for more information.



<HR>

\section XMLfont <Font>
Registers a new FontSet via OpenGUI::FontManager::RegisterFontSet()

Example:
\verbatim
<Font Name="pecot" File="pecot.ttf" />
\endverbatim

\par Attributes
 - \c Name (required)
   - \em Type: string
   - \em Description: Name by which the font will be referenced within %OpenGUI. This does not have to be the same as the filename.
 - \c File (required)
   - \em Type: string
   - \em Description: The path and filename where the actual font can be located. This is passed verbatim to the ResourceManager, so anything that it can decipher can be used.




<HR>

\section XMLimageset <Imageset>
Loads the given \c File as an imageset via OpenGUI::ImageryManager::createImageset().

Example:
\verbatim
<Imageset File="tachometer.png">
	<!-- some <Imagery> tags in here -->
</Imageset>
\endverbatim

\par Attributes
 - \c File (required)
   - \em Type: string
   - \em Description: The path and filename where the actual image file to load can be located. This is passed verbatim to the ResourceManager, so anything that it can decipher can be used.

\note Due to the way the ImageryManager treats duplicate requests to createImageset(), duplicate entries of this tag have no ill effect, and the \<Imagery\> enclosed  within any duplicates will be added to the originally established Imageset.



<hr>
\section XMLimagery <Imagery>
Adds an Imagery to the enclosing Imageset via OpenGUI::Imageset::createImagery().
This tag \b must be enclosed by an \<Imageset\> tag or it is ignored!

Example:
\verbatim
<Imageset File="somefile">
	<Imagery Name="TachBG" Left="2" Top="2" Width="321" Height="321" />
</Imageset>
\endverbatim

\par Attributes
 - \c Name (required)
   - \em Type: string
   - \em Description: The name to give this Imagery object.
 - \c Left (required)
   - \em Type: int
   - \em Description: The X value of the upper left corner of this Imagery within the Imageset in pixels.
 - \c Top (required)
   - \em Type: int
   - \em Description: The Y value of the upper left corner of this Imagery within the Imageset in pixels.
 - \c Width (required)
   - \em Type: int
   - \em Description: The width of this Imagery within the Imageset in pixels.
 - \c Height (required)
   - \em Type: int
   - \em Description: The height of this Imagery within the Imageset in pixels.

\note Multiple \<Imagery\> tags with the same \c Name will redefine the Imagery as defined in OpenGUI::Imageset::createImagery().


<hr>
\section XMLcursordef <CursorDef>
Defines a Cursor of the given \c Name using the given \c BaseName and \c BaseLibrary via OpenGUI::CursorManager::DefineCursor(). Any enclosed \ref XMLproperty tags are used to define property settings that will be applied to the cursor upon creation, as per the DefineCursor() function.

Example:
\verbatim
<CursorDef Name="Square" BaseName="Generic" BaseLibrary="OpenGUI">
	<Property ValueName="Size" ValueType="FVECTOR2" ValueData="(100x100)" />
	<Property ValueName="Imagery" ValueType="STRING" ValueData="TachBG" />
	<Property ValueName="Offset" ValueType="IVECTOR2" ValueData="(160x160)" />
</CursorDef>
\endverbatim

\par Attributes
 - \c Name (required)
   - \em Type: string
   - \em Description: The name to give this cursor definition
 - \c BaseName (required)
   - \em Type: string
   - \em Description: Name of the base cursor as it was originally registered.
 - \c BaseLibrary (required)
   - \em Type: string
   - \em Description: Library of the base cursor as it was originally registered.

\warning Multiple cursor definitions with the same name will result in an error.


<hr>
\section XMLwidgetdef <WidgetDef>
Defines a Widget of the given \c Name using the given \c BaseName and \c BaseLibrary via OpenGUI::WidgetManager::DefineWidget(). Any enclosed \ref XMLproperty tags are used to define property settings that will be applied to the widget upon creation, as per the DefineWidget() function.

Example:
\verbatim
<WidgetDef Name="Tachometer" BaseName="Tachometer" BaseLibrary="OpenGUIEx">
	<!-- some optional <Property> tags -->
</WidgetDef>
\endverbatim

\par Attributes
 - \c Name (required)
   - \em Type: string
   - \em Description: The name to give this widget definition
 - \c BaseName (required)
   - \em Type: string
   - \em Description: Name of the base widget as it was originally registered.
 - \c BaseLibrary (required)
   - \em Type: string
   - \em Description: Library of the base widget as it was originally registered.
   
\warning Multiple widget definitions with the same name will result in an error.


<hr>
\section XMLproperty <Property>
These tags are \b not processed by XMLParser directly, but are rather processed in DOM style by their containing tag processor. However, their format is standard throughout %OpenGUI for consistency purposes. For the most part, these tags are loaded into OpenGUI::Value objects via OpenGUI::Value::LoadFromXMLNode(), and are stored for later use as property assignments for the object definition that contained them.

Example:
\verbatim
<Property ValueName="Size" ValueType="FVECTOR2" ValueData="(100x100)" />
\endverbatim

\par Attributes
 - \c ValueName (required)
   - \em Type: string
   - \em Description: The name to give the Value object, which when used is applied to an object property of the same name.
 - \c ValueType (required)
   - \em Type: string
   - \em Description: Identifies the type of data stored in ValueData
 - \c ValueData (required)
   - \em Type: variable
   - \em Description: A string formatted \ref Types "OpenGUI Type". See \ref StringFormats for details.
   

<hr>
\section XMLscreen <Screen>
The \<Screen\> tag is used to create and destroy Screen objects through XML. During XMLLoad all attributes provided are read and used. During XMLUnload, only the \c Name attribute is used to identify the Screen to destroy. Only the \c Name and \c Size attributes are required, with all others being optional with implied defaults. See OpenGUI::Screen for more information on the default values.

Example:
\verbatim
<Screen Name="MainScreen" Size="(800x600)" UPI="(96x96)" AutoUpdating="True" AutoTiming="True" DefaultCursor="Square" CursorEnabled="True" CursorVisible="True" >
	<!-- optional <Widget> tags in here -->
</Screen>
\endverbatim

\par Attributes
 - \c Name (required)
   - \em Type: string
   - \em Description: The name identifying the Screen
 - \c Size (required)
   - \em Type: FVector2
   - \em Description: The size/resolution of the Screen, used during creation
 - \c UPI
   - \em Type: FVector2
   - \em Description: The Units Per Inch of the Screen, used during creation
 - \c AutoUpdating
   - \em Type: bool
   - \em Description: If the Screen created should be auto updated (redrawn) during OpenGUI::ScreenManager::updateScreens()
 - \c AutoTiming
   - \em Type: bool
   - \em Description: If the Screen created should be auto injecting time events via OpenGUI::ScreenManager::updateTime()
 - \c DefaultCursor
   - \em Type: string
   - \em Description: The name of a previously defined Cursor to use as this Screens default cursor
 - \c CursorEnabled
   - \em Type: bool
   - \em Description: If the Screen created should be initially set with the cursor enabled
 - \c CursorVisible
   - \em Type: bool
   - \em Description: If the Screen created should be initially set with the cursor visible

\note
If the processing of the \<Screen\> tag fails at any stage, the entire Screen is invalid, and will not be created. If it has already been created, it will be destroyed before processing returns.



<hr>
\section XMLwidget <Widget>
The \<Widget\> tag is used to create widgets underneath of the containing \<Widget\> or \<Screen\> or \<FormDef\> tag. When processing this tag, the parent is cast into a \ref OpenGUI::ContainerControl "ContainerControl". If this cast fails, the operation will fail. It is the XML writer's responsibility to ensure that they only place children \<Widget\> tags within proper containing objects.

Example:
\verbatim
<!-- either <Screen>, <Widget>, or <FormDef> -->
	<Widget Name="MyTach" DefName="Tachometer">
		<!-- some optional <Property> tags -->
		<!-- some optional <Widget> tags in here if this widget is a container -->
	</Widget>
<!-- end enclosing </Screen>, </Widget>, or </FormDef> -->
\endverbatim

\par Attributes
 - \c Name (required)
   - \em Type: string
   - \em Description: The name identifying the Widget
 - \c DefName (special requirement: mutually exclusive with BaseName/BaseLibrary)
   - \em Type: string
   - \em Description: Name of the previously registered widget definition describing this widget
 - \c BaseName (special requirement: mutually exclusive with DefName; requires BaseLibrary)
   - \em Type: string
   - \em Description: Name of the base widget as it was originally registered.
 - \c BaseLibrary (special requirement: mutually exclusive with DefName; requires BaseName)
   - \em Type: string
   - \em Description: Library of the base widget as it was originally registered.

\note The \c BaseName and \c BaseLibrary attributes require eachother. You cannot have one without the other. Additionally, the \c DefName is mutually exclusive with the \c BaseName / \c BaseLibrary pair. You can use one method or the other, but you cannot use both.
\see \ref XMLproperty, \ref XMLwidgetdef, \ref XMLscreen, \ref XMLformdef
\remarks
The \ref XMLproperty tags within are processed after the attachment to the parent has been made. All applicable \ref XMLwidgetdef properties are still processed during widget creation, which is prior to the attachment. All \ref XMLproperty tags are fully processed before any other child tags are processed. This is a minor deviation from the usual "in-order processing" that XML processing usually exibits. It should also be noted that for the sake of loading speed, the automatic layout code is temporarily disabled during the potential creation of children via the OpenGUI::ContainerControl::suspendLayout() and OpenGUI::ContainerControl::resumeLayout() functions.
\attention
When adding created Widgets to the container, they are added in the order they are processed using OpenGUI::WidgetCollection::add_back(widget,true). The important things to note here is that they are added to the back (visually below previous widgets), and that the parent container assumes ownership of the pointer (meaning that the widget will be deleted when the parent container is deleted).




<hr>
\section XMLformdef <FormDef>
Form definitions provide a mechanism for defining fully built forms for reuse multiple time at any location within an existing GUI hierarchy. The \<FormDef\> tag itself describes both the name of the form as well as the widget type of the root container. The attribute names and uses are analogous to the \ref XMLwidget tag by design both for ease of use as well as to serve as a reminder that the \<FormDef\> tag itself represents the root widget. Within each level of the form you can embed \ref XMLwidget and \ref XMLproperty tags. These will provide the structure of the form, as well as initial property settings that are applied when the form is instantiated. The given widgets are not tested for existance or their ability to act as containers during form definition creation. Instead, the widgets are resolved at instantiation. Their ability to act as containers is only tested (and required) should they be asked to contain additional widgets according to the form definition at instantiation.

Example:
\verbatim
<FormDef Name="MyFormName" BaseName="SomeContainer" BaseLibrary="SomeLibrary">
	<!-- some optional <Property> tags -->
	<!-- some optional <Widget> tags in here if this widget is a container, each able to contain further  <Widget> and <Property> tags -->
</FormDef>
\endverbatim

\par Attributes
 - \c Name (required)
   - \em Type: string
   - \em Description: The name to identify the Form created
 - \c DefName (special requirement: mutually exclusive with BaseName/BaseLibrary)
   - \em Type: string
   - \em Description: Name of the previously registered widget definition to use as a root widget for the form
 - \c BaseName (special requirement: mutually exclusive with DefName; requires BaseLibrary)
   - \em Type: string
   - \em Description: Name of the widget (as it was originally registered) to use as a root widget for the form
 - \c BaseLibrary (special requirement: mutually exclusive with DefName; requires BaseName)
   - \em Type: string
   - \em Description: Library of the widget (as it was originally registered) to use as a root widget for the form





<hr>
\section XMLform <Form>
The \<Form\> tag can be used to create an instance of a Form that was previously defined either progmatically or by use of the \ref XMLformdef tag. The form definition is referenced by the \c FormDef attribute. The \c Name attribute (if present) is used as the name to assign the root widget before it is added to the parent container, otherwise the root element will assume the name of the form definition it was created from.

Example:
\verbatim
<Form Name="ElementName" FormDef="MyFormName" />
\endverbatim

\par Attributes
 - \c Name
   - \em Type: string
   - \em Description: The name to assign the root widget in the form
 - \c FormDef (required)
   - \em Type: string
   - \em Description: The name of the form definition to intantiate



<hr>
\section XMLface <Face>
OpenGUI::Face objects can be defined in XML, and will be stored by the OpenGUI::ImageryManager for later retrieval. In order to define a Face via XML, you need to declare both a Name and a Metric, and fill it with \<Row\>s of \<Slice\>s.

Example:
\verbatim
<Face Name="FaceName" Metric="Units">
	<!-- contains <Row>s of <Slice>s, as shown below -->
	<Row>
		<Slice />
	</Row>
</Face>
\endverbatim

\par Attributes
 - \c Name (required)
   - \em Type: string
   - \em Description: The name to store the Face under
 - \c Metric (required)
   - \em Type: string
   - \em Description: The OpenGUI::Face::Metric to use when evaluating dimensions within the Face. Must be either "Units" or "Pixels".



<hr>
\section XMLrow <Row>
Groups contained \<Slice\>s into logical rows.

Example:
\verbatim
<Face Name="FaceName" Metric="Units">
	<!-- contains <Row>s of <Slice>s, as shown below -->
	<Row>
		<Slice />
	</Row>
</Face>
\endverbatim

\par Attributes
Has no attributes. It is purely a grouping mechanism.



<hr>
\section XMLslice <Slice>
Defines a single Slice of a Face. Must be contained by a \<Row\>, which is also contained by a \<Face\>. All attributes are optional, the defaults of which are specified by OpenGUI::SliceDef.

Example:
\verbatim
<Face Name="FaceName" Metric="Units">
	<!-- contains <Row>s of <Slice>s, as shown below -->
	<Row>
		<Slice Width="20" Height="20" Imagery="GenericFrameML" />
	</Row>
</Face>
\endverbatim

\par Attributes
 - \c Imagery
   - \em Type: string
   - \em Description: Name of a previously defined Imagery to display in this Slice area
 - \c Width
   - \em Type: float
   - \em Description: The minimum width of this Slice, measured in the Face metric.
 - \c Height
   - \em Type: float
   - \em Description: The minimum height of this Slice, measured in the Face metric.
 - \c GrowWidth
   - \em Type: bool
   - \em Description: If true, the slice will volunteer to grow in width to help fill the total coverage area when the Face is rendered.
 - \c GrowHeight
   - \em Type: bool
   - \em Description: If true, the slice will volunteer to grow in height to help fill the total coverage area when the Face is rendered.
 - \c ColSpan
   - \em Type: int
   - \em Description: The number of \em additional columns to span this Slice across.
 - \c RowSpan
   - \em Type: int
   - \em Description: The number of \em additional rows to span this Slice across.
 - \c Tile
   - \em Type: bool
   - \em Description: If true, the Imagery of the Slice will be rendered at native size, but will be tiled to fill the required area. Otherwise the Imagery is stretched to fit (the default).
   



<hr>



\section example Example Config File
The following is an example xml file. It is listed here in its entirety so that you can get an idea of what a common config file looks like.
\verbatim
<?xml version="1.0" ?>
<OpenGUI>
	<Plugin File="TachometerWidget" />
	
	<Font Name="pecot" File="pecot.ttf" />

	<Imageset File="tachometer.png">
		<Imagery Name="TachBG" Left="2" Top="2" Width="321" Height="321" />
		<Imagery Name="TachNeedle" Left="42" Top="348" Width="131" Height="7" />
	</Imageset>


	<CursorDef Name="Square" BaseName="Generic" BaseLibrary="OpenGUI">
		<Property ValueName="Size" ValueType="FVECTOR2" ValueData="(100x100)" />
		<Property ValueName="Imagery" ValueType="STRING" ValueData="TachBG" />
		<Property ValueName="Offset" ValueType="IVECTOR2" ValueData="(160x160)" />
	</CursorDef>
	
	<WidgetDef Name="Tachometer" BaseName="Tachometer" BaseLibrary="OpenGUIEx">
	</WidgetDef>
</OpenGUI>
\endverbatim

\note The \<?xml version="1.0" ?\> line is not required by TinyXML, but you may want to add it anyways.

*/