/*!
	\mainpage OpenGUI Documentation
	
	\image html logo.jpg
	
	%OpenGUI is an easy to use and easy to extend GUI framework for use in 3D applications.
	The core aim of %OpenGUI is to provide developers of 3D applications a drop in
	system for creating simple GUIs without hassle, while still providing an easy method
	of extendability for creating complex GUIs with custom widgets.
	<BR><BR>
	See the list of \subpage Features "features" for details.
	<BR><BR>
	
	
	
	\section UserDocs User Documentation
	The user documentation is divided into several sections and is intended to provide
	explanations and examples of library usage, as well provide a few advanced topics
	such as how to extend the GUI through custom widgets.
	
	- \subpage IntegratingOpenGUI "Integrating OpenGUI"
	
	- \subpage XMLDOC "XML Configuration Files"
	
	- \subpage Events  "Events"
	
	- \subpage CustomWidgets "Extending via Custom Widgets"
	
	\n\n\n
	<hr>	
	\note
	%OpenGUI is distributed using the  BSD license so that both amateur and
	professional developers can benefit from its use. The exact copy of
	this license can be found in the file LICENSE.TXT that is distributed with the
	source code, or by clicking \link License here.\endlink
*/



/*!
	\page License
	%OpenGUI is freely usable/distributable under the BSD license, the contents of which follow:
	<HR>
	\verbinclude LICENSE.TXT
	<BR><HR><BR>
	%OpenGUI also utilizes a few external libraries. The names, web sites and license types of these
	external libraries are listed below.
	<HR>
	Name: Corona (version 1.0.2)\n
	Web site: http://corona.sourceforge.net/ \n
	License: <a href="http://opensource.org/licenses/zlib-license.html">zlib license</a> \n
	<HR>
	Name: TinyXML (version 2.4.3)\n
	Web site: http://www.grinninglizard.com/tinyxml/index.html \n
	License: <a href="http://opensource.org/licenses/zlib-license.html">zlib license</a> \n
	<HR>
	Name: Freetype (version 2.1.10)\n
	Web site: http://www.freetype.org/ \n
	License: <a href="http://freetype.sourceforge.net/FTL.TXT">The FreeType License</a> \n
	Credit as requested:\n
\verbatim
Portions of this software are copyright © 2006
The FreeType Project (www.freetype.org). All rights reserved.
\endverbatim
	
*/
/*!
	\page Features
		
	- Easily integrated with any input system: All input is injected into the system by the application using simple function calls.
	- Cross API: Is easily used in native DirectX or OpenGL, as well as the OGRE rendering engine.
	- Easily extendable widget set by class inheritance.
	- Auto scaling, pixel aligned fonts, rendered via FreeType 2.
	- Free form render operations allow Widget imagery to be rotated and scaled in any way imaginable.
	- Plugin system so custom widgets can be used in any application without recompiling.
	
*/





/*!
\page CustomWidgets Creating Custom Widgets
	Creating custom widgets in %OpenGUI, like most programming endeavors, is a task of variable difficulty depending on what you are trying to accomplish. One of the design goals of %OpenGUI is to mimic the common GUI systems where possible so that there is some level of existing familiarity with how everything works together. If you are simply looking to slightly alter the functionality of an existing Widget, you're quest will be quite simple. On the other hand, if you're looking to build an entirely brand new Widget from a core base class, you're in for a slightly bumpier ride.
	
\section SelectingBaseClass Selecting a base class
	One of the most critical decisions you make comes right at the very beginning: <em> Choosing the right base class</em>. You always have the option to start with one of the core Widget types, but if there is an existing Widget from another library that already does most of what you want \em functionally, you're often best to use that as your base. The key in that statement is \em functionally. The appearance of a Widget can be changed so easily that it is almost irrelevant, so you're much better off to select your base class based on the existing functionality that it provides. Again, higher level Widgets provided by an external library, such as Amethyst, often make much better base classes for application style needs. Keep in mind though, that using one of these as a base class means that your Widget will be dependent on the presence of that library even if that library is not used anywhere else in your application. If this is unacceptable, then you're stuck using one of the core base classes.
	
	If you're still bound and determined to use one of the core Widget types as a base class, or simply have no other choice, it is crucial that you select the correct one. Here are the list of core base Widget classes, and some brief descriptions about them. Hopefully this will make your decision a little easier.
	
	\par OpenGUI::Widget
	\ref OpenGUI::Widget "View class documentation"\n
	This is the very bottom of the barrel. It offers the least amount of functionality, and has very few predefined properties and events. A Widget is a GUI object that can be contained but cannot contain others, possibly be drawn yet has no size or position, and can receive input events yet does nothing with them by default. If you want to make your Widget renderable, you're likely better off using Control as a base. You could use a Widget as an event snooper/logger, or as an event triggering timer object, just as a few examples. Basically any Widget that needs to have a name and exist in a GUI somewhere, yet produce no real output, is a good fit for Widget. Beyond that, you're probably better off to start looking further up the class tree.

	\par OpenGUI::Control
	\ref OpenGUI::Control "View class documentation"\n
	This is an adequate option for most Widgets. Controls are Widgets that have a size and position, and offer a host of built in functionality, properties, and events. They have all of the abilities of the Widget class, plus define the most common attributes of well behaved GUI objects. If your custom Widget doesn't need to contain other widgets, this is most likely what you want to use.
	
	
	\par OpenGUI::ContainerControl
	\ref OpenGUI::ContainerControl "View class documentation"\n
	If you want your custom widget to contain other widgets, ContainerControl is often the best choice. It provides all of the functionality of Control, with the added ability to contain child widgets.
	
	\par
	Most user created widgets are actually conglomerations of existing widgets, handily wrapped up into a single ContainerControl. This has the downside of depending on the widget library that provides the widgets you are embedding. If this isn't acceptable, you have no other choice but reimplement all of the functionality and draw routines for the widgets you were planning on embedding, in which case Control may be a better base class.
	
	\par OpenGUI::Window
	\ref OpenGUI::Window "View class documentation"\n
	This base class is specifically designed for use by controls that plan on embedding several other controls in a movable window setting. Window provides a caching system to prevent the endless redrawing of contained widgets. Until a widget is contained within a Window, the invalidate() function does literally nothing of any value as the widget is fully redrawn each frame. This caching functionality allows the Window, along with all of its contents, to be moved around at no additional child redraw cost. Window caches are only invalidated when a contained Widget is invalidated. This optimization, like most in the computing world, comes at the cost of memory. Unless you're writing a framed window widget, or something similar, this probably isn't what you're after, as it is unrealistic to forcefully impose the additional memory usage on a GUI "just because".


\section MakingTheWidget Making the Widget
	At this point you've selected your base class, so it's time to start writing your widget. For the intent of this document we'll assume that you selected OpenGUI::Control as your base class. The concepts used to create custom widgets are common regardless of your base class, and Control is the most common selection, so it makes sense.
	
\subsection Creating_your_class_definition Creating your class definition
	Creating the class definition itself is fairly straight forward, and is illustrated below.
\includelineno custom_widget.h
	We obviously need the \c include on line 1. The "using namespace OpenGUI;" (line 3) is just so that we don't need to constantly prepend "OpenGUI::" to every %OpenGUI specific type. We could just as easily do the prepending, or wrap this entire class in a namespace scope such as:
\code
#include "OpenGUI.h"
namespace OpenGUI {
	/* Class definition in here */
}
\endcode
	The methods on lines 11 and 12 provide access to our make believe property "MyBool". We expose the property via methods like this to allow native C++ code to access them directly, as well as make our life a little easier when it comes time to implement the actual Property Accessor. Line 15 is a wrapper function for invoking "MyEvent", and it's mostly a convenience function. Line 16 is a default event handler, with a signature capable of being bound by an \ref OpenGUI::EventDelegate EventDelegate. The "private" section, obviously just holds a state variable for the "MyBool" property.

\subsection ClassImplementation Class Implementation
	This next section is where the fun really begins. In the following section we're going to go step by step implementing our new widget. But before we do that, here's the obligatory complete dump:
	\include custom_widget.cpp
	That's an awful lot to chew on, so now we'll break it down into more manageable pieces with some more detailed explanations as to what is going on.

	Its funny how the most initially obscure looking code is always first. ;) The following code exposes access to the "MyBool" property. This is done by creating a new class that derives from OpenGUI::ObjectProperty and performing the necessary virtual function implementations to achieve the desired effect. You should notice that within get() and set() we end up simply calling our native property accessor functions.
	\skip MyWidget_MyBool_ObjectProperty
	\until gMyWidget_MyBool_ObjectProperty
	This particular object is a combined class definition and static creation all rolled into one. It doesn't necessarily have to be a static object like this. It could just as easily have been defined in the class header and then simply had a new instance created for each instance of MyWidget. The above method is used throughout %OpenGUI because it conserves memory, as unless you plan on having different property accessor logic for each object (unlikely), there's no reason to create a new accessor on the heap for each one.

	The next chunk of code is, once again, an in place definition and static creation rolled into one. This time it is for the \ref OpenGUI::ObjectAccessorList ObjectAccessorList, which is a sort of property lookup hub. It groups all of the individual properties into a single object for lookup.
	\skip MyWidget_ObjectAccessorList
	\until gMyWidget_ObjectAccessorList

	And finally we get to the actual meat of our widget class. We're just not quite out of the "freaky" woods just yet though. In the first few lines of the class constructor, we need to make sure that our static ObjectAccessorList is property initialized by giving it the parent of our base class if it doesn't already have one. This allows failed lookups of property names to fall back to the next parent class. If we don't do this, we won't inherit the property accessors of our base class, and will either have to live with not having them, or implement brand new accessors ourselves. Since the code soup involved in making properties work is probably less than appealing at this point, we'll happily point our ObjectAccessorList to out base classes ObjectAccessorList.

	\skip MyWidget::MyWidget
	\until }
	The last 2 statements create the event "MyEvent", and then bind our default event handler using an \ref OpenGUI::EventDelegate EventDelegate. Obviously events are currently far easier to bind than properties. One day this may change, but for now we'll live with it.

	On to the destructor. If your class requires special clean up actions, you can obviously perform them here. Our destructor does nothing special, so we'll move on.
	\until }

	The following 2 methods are the native property accessors. They were used in the property binding to access the internal state variable. You obviously don't \em need to use a state variable, and can happily generate the results purely pragmatically if you so desire. But since this is just an example, we took the easy way out.
	\until }
	\until }

	And here's the event injector. Remember how I said it was mostly a convenience function? I wasn't kidding. %OpenGUI uses event processors similar to this quite extensively to ensure we properly build event structs and don't typo the event name.
	\until }
	Given that event injectors are usually quite brief, they are a good candidate for inlining into your class definition.

	And finally we reach the default event handler. As you can see, we're supposed to do something important here, but again, this is only an example so there's nothing to do.
	\until }

	Last but not least, we have a new onDraw implementation. The onDraw method is the default event handler for draw operations and is initially exposed by the \ref OpenGUI::Control Control class.
	\until }
	As you can see, we call the base class's implementation first so that our draw operations come afterward, which would allow us to draw over top of their's. Since Control::onDraw doesn't draw anything by default, this particular instance of calling the base implementation is a waste of time, but I added it as an example to show that you should normally call the base implementation within your override. A cursory glance at the rest of our implementation shows that we're just drawing a red rect that fills our control. You should notice that we're popping off the brush modifiers that we pushed. Popping the modifiers is good practice, but %OpenGUI brushes have some internal tracking that allows it to auto pop whatever onDraw's leave behind. Still, if you're calling base implementations in addition to your own code, if you fail to pop the brush you'll leave it in an unknown state for the next user, which usually results in strange things happening. But if you're clever you can use this to your advantage and make interesting things. Like buttons that draw upside down... ;)

\subsection RinseRepeat Rinse Repeat
	And that's pretty much the end of implementation. Aside from property binding, creating new widgets is ridiculously simple. (And even the property binding isn't all that bad.) All you need to do is find a suitable base class to inherit from, and fill your new creation with all sorts of nifty functionality. If you'd like more example code, it's probably best to refer directly to the source. The source is regularly ran through code beautifiers to maintain readability, and is fairly straight forward in its purpose.

	The source for the base widget classes can be found in the following files:
	- OpenGUI_Widget.h/cpp
	- OpenGUI_Control.h/cpp
	- OpenGUI_ContainerControl.h/cpp
	- OpenGUI_Window.h/cpp

\section RegisterTheWidget Widget Registration
	In order for %OpenGUI to load your widget by name, you'll need to register it with the \ref OpenGUI::WidgetManager "WidgetManager". This is done by calling \ref OpenGUI::WidgetManager::RegisterWidgetFactory "RegisterWidgetFactory" with the necessary parameters. All you need to provide is a \c Name, \c Library, and a pointer to a valid C callback style factory that creates your Widget via the \c new operator and returns the pointer. The \c Name of your widget can be just about anything, but you should obviously use a name that makes sense as this will be the name that is used to create your widget. The \c Library is a sort of group identifier. It exists so that widget libraries can register widgets that use fairly common names (like "Button") without much fear for name collisions (as those cause fatal exceptions). As a side effect, it also often provides a mechanism for grouping widgets together that came from the same widget library, but that convention isn't enforced so your mileage may vary. What you use for the \c Library identifier is up to you, but it is highly recommended that you use the same identifier for all widgets in the same library, and that it be something fairly original to prevent name collisions.
*/






/*! \page IntegratingOpenGUI Integration
	This guide covers how to use %OpenGUI in a C++ project. Interfaces to %OpenGUI may exist for other languages, and those interfaces should provide their own usage documentation as they are not covered here.
	
	Should you need assistance using %OpenGUI beyond the scope of this documentation, the following sources are made available for public use:
	- <a href="http://opengui.sourceforge.net/" target=_new>OpenGUI Web site</a>
	- <a href="http://opengui.rightbracket.com/trac/" target=_new>OpenGUI Wiki/Trac</a>
	- <a href="http://opengui.rightbracket.com/phpBB2/" target=_new>OpenGUI Forums</a>

<HR>
\section inc_link Includes and Linker Input
	In order to begin using %OpenGUI in your application, you will need to include \c OpenGUI.h in every source file that will use parts of the library. This can be performed by the following code:
	\code #include "OpenGUI.h" \endcode
	Due to the scale of %OpenGUI, it is not practical for all classes to be defined within a single header file. As such, \c OpenGUI.h is a super header that automatically includes all other necessary headers. You will need to add the location of \c OpenGUI.h as an include search path for your compiler. The steps required to perform this are compiler specific, so they are not covered here.
	\note
	It is completely safe to include only the specific headers you need at any given time, but it is much easier to simply include this super header.
	
	In addition to the header file, you'll also need to provide your linker with the appropriate library (\c *.lib ) file when building fully linked binaries. The name of this file is either \c OpenGUI_d.lib for the debug library, or \c OpenGUI.lib for the release library.
	
	Currently %OpenGUI only supports use as a DLL, so you'll also need to place the appropriate DLL into the same directory as your application binary. There are a few other options available for this, but they are out of the scope of this document. The debug DLL is \c OpenGUI_d.dll, the release DLL is \c OpenGUI.dll.
	
	\par Summary Information
	\code #include "OpenGUI.h" \endcode
	- OpenGUI_d.lib - Debug Library
	- OpenGUI_d.dll - Debug DLL
	- OpenGUI.lib - Release Library
	- OpenGUI.dll - Release DLL

<HR>
\section initialize Initializing OpenGUI
	Initialization of %OpenGUI can be broken up into a few simple steps.
	- Create a \ref OpenGUI::Renderer "Renderer"
	- Create a \ref OpenGUI::ResourceProvider "ResourceProvider" <i>(optional)</i>
	- Create a \ref OpenGUI::LogListener "LogListener" <i>(optional)</i>
	- Create the \ref OpenGUI::System "System", passing in the previously created support objects
	
	For the sake of this document, we'll use the built in ResourceProvider and LogListener, and the reference OpenGL Renderer.
\code
#include "OpenGUI.h"
#include "OpenGUI_OGLRenderer.h"
using namespace OpenGUI;

[...]

Renderer* renderer = new OGLRenderer( 800, 600 );
System* system = new System( renderer );
\endcode
	That's basically all it takes to initialize %OpenGUI. You simply pass the System constructor pointers to the necessary user provided support classes and it will take care of the rest. The end result is a pointer to a fully initialized %OpenGUI instance, ready for use.

<HR>
\section createscreen Create a Screen
	All GUIs are built upon \ref OpenGUI::Screen "Screen" objects. A Screen is basically a virtual monitor. A Screen can either render directly to the main frame buffer, or it can render to a texture. In this case, we're going to use the default render targeting of a Screen, which is to render directly to the frame buffer.
\code
screen = ScreenManager::getSingleton().createScreen( "MainScreen", FVector2( 800, 600 ) );
\endcode
	This snippet of code creates a single Screen, named "MainScreen", that has a virtual resolution of 800 x 600. The resolution of a Screen is completely abstracted from the true resolution of the destination render surface. No matter what size of the render surface, a Screen will always map its virtual resolution evenly across the entire destination surface. This allows you to create a GUI once, and it will automatically scale correctly across all possible render target resolutions. Fonts are always automatically scaled appropriately to preserve true pixel alignment to the render target surface, while maintaining their visual size within the virtual resolution of the Screen. In other words, your text will always look crisp, regardless of the true resolution of the render target, and will always be proportional to the original GUI design.


<HR>
\section input_injection Input Injection
	At some point you're going to need to allow the user to interact with your GUI. The process of injecting input is performed individually per Screen. This is to allow multiple Screens to run simultaneously. A good example of this would be a game scene full of computer monitors that the user can interact with. Each might have a completely different GUI layout applied to them with their own animations and event hooks. However, in this example we're going to stick with the single, frame buffer attached Screen that we created earlier.
\code
// assume that "yourInputSystem" is a pointer to some input system
float x_abs, y_abs; // some floats to hold the mouse position
// The next function call represents your own input system
// retrieving the mouse position as a percentage (0.0f thru 1.0f)
yourInputSystem->getMousePosition( &x_abs, &y_abs );
screen->injectCursorPosition_Percent( x_abs, y_abs );
screen->injectCursorPress_State( yourInputSystem->isButtonDown() );
\endcode
The previous code uses the fictitious \c yourInputSystem to retrieve the mouse position, which it then injects into the Screen as an absolute position within the GUI using \ref OpenGUI::Screen::injectCursorPress_State "injectCursorPress_State". The next call retrieves the button up/down state for the mouse, and feeds it into the state-aware button function \ref OpenGUI::Screen::injectCursorPress_State "injectCursorPress_State". The Screen class provides several different methods for input injections, so you can use the one that is most appropriate for your specific needs.

<HR>
\section show_cursor Showing the Cursor
	Unlike many GUI systems, %OpenGUI does not assume that you want a visible cursor, or that you always want to process cursor input injections. By default the cursor is visible but disabled. A cursor will not draw unless it is both enabled and visible, so initially there is no displayed cursor until you enable it. However, you cannot have a visible cursor without first defining the default cursor for the Screen. The default cursor is the cursor that will be drawn when the cursor is over a widget that does not define its own preferred cursor.
\code
// for our purposes, we'll assume that "Arrow" is an already defined Cursor
CursorPtr cursor = CursorManager::getSingleton().CreateDefinedCursor( "Arrow" ); // create an instance of the cursor
screen->setCursor( cursor ); // set this cursor to be the default for the Screen
cursor = 0; // free the handle any way you like, either explicitly or by letting it run out of scope
screen->enableCursor(); // enable the cursor for this Screen
\endcode
	Once you've done this, the Arrow cursor will be displayed as the default cursor for the Screen. Alternatively, if we wanted to enable an invisible cursor (because we're using a hardware cursor, or some other pointing device), we could have simply enabled the cursor without setting a default Cursor for the Screen. Since you cannot have a visible cursor without the Screen having a default Cursor to show, the Screen will automatically mark the cursor hidden upon enabling.
\code
screen->enableCursor(); // enable the cursor for this Screen, it will automatically be marked hidden
\endcode

<HR>
\section update_screen Updating the Screen
	In order for anything to be drawn at all, we need to tell %OpenGUI when to perform updates for the Screens. This can be done at several different levels, with the application assuming varying amounts of additional work. For the purposes of this example, we'll use the most basic update method, which is to ask System to update all Screens for us.
\code
system->update(); // perform fully automated update
\endcode
	By using \ref OpenGUI::System::update "System::update", we're asking %OpenGUI to update all Screens, as well as perform time injections. Refer to the API documentation for more information on the various levels at which Screens can be updated, and the additional responsibilities the application assumes when doing so.

<HR>
	That pretty much covers the basics of integrating %OpenGUI into your application. The demos can be referenced for further example code, and the resources listed at the top can be utilized if you require further assistance.
*/


/*! \page WidgetFocus Widgets and Focus
	The concept of "focus" isn't a new concept in GUI systems these days, but it is most definitely a concept that is required. Focus is the redirection of input to a specific target in a GUI. In other words, if your widget grabs cursor focus then your widget gets to receive cursor events before any other widget, allowing you to perform functions that are normally not available (such as tracking cursor movement regardless of where it goes). %OpenGUI provides focusing mechanisms for all input types, but due to the specifics of each input type the functionality of focusing has varying effects.
	
	\section FocusCursor Cursor Focus (mouse input)
	When no widget has cursor focus, the cursor input events are sent to all root level GUI widgets, and it is up to their discretion to pass the event on to any children they may have. This usually means that the child will not receive any cursor events until the cursor is already within the parent widget, as the default implementation for cursor events in OpenGUI::ContainerControl is to cull any events that occur while the cursor is outside of its bounds. Sometimes this is not the desired effect, so in that case a child widget can elect to grab cursor focus. Grabbing cursor focus redirects all cursor events directly to the child widget, and the rest of the GUI no longer receives any cursor events until the focus is released. This does not mean you get a "first peek with the option to defer to original processing". Once you have focus, you get it all, and everyone else gets absolutely nothing until you give up the focus. It is important to note that when you have focus, you are receiving the cursor events directly from the Screen, so the cursor position information is provided in the full Screen coordinate space. Normally the cursor input events have the cursor position information offset according to the widget's container for convenience, but again, this is not the case when you have focus.
	
	There is no %OpenGUI generated event that can occur that will force the loss of cursor focus. Once you have it, you've pretty much got it until you release it. Destruction of the widget with focus will automatically free focus, so don't worry about that. If the cursor is disabled on the screen, you may want to free your focus, but you are not obligated or forced to do so. There is, however, one condition that will cause the loss of cursor focus, and that is when another widget grabs it from you. Only one widget can ever have a particular focus at any given point in time. So when someone else asks for it when you have it, the only option is to give it to them. In practice, most cursor focuses are caused as the result of previous cursor activity, so the likelihood that you'll ever be interrupted from focusing the cursor is fairly low. However the possibility remains that some evil widget might steal it from you, so you should write your widgets with that possibility in mind.

	\section FocusKey Key Focus (keyboard input)
	Key focus works much like cursor focus, with a few exceptions. The most glaring exception is that key events are not automatically sent to the root level widgets. They are only sent to widgets that specifically ask for it. The best way to receive key events is to simply grab the key focus for the duration that you need it, and release it when you're done with it. As with all focusing, only one widget can ever have any one particular focus at any point in time. Since keyboard focuses are often the result of cursor events, don't be too surprised to have your keyboard focus yanked away.
*/

